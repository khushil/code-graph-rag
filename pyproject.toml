[project]
name = "graph-code"
version = "0.0.2"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "loguru>=0.7.3",
    "pydantic-ai-slim[google,openai,vertexai,anthropic]>=0.2.18",
    "pydantic-settings>=2.0.0",
    "pymgclient>=1.4.0",
    "python-dotenv>=1.1.0",
    "toml>=0.10.2",
    "tree-sitter-python>=0.23.6",
    "tree-sitter>=0.24.0",
    "watchdog>=6.0.0",
    "typer>=0.12.5",
    "rich>=13.7.1",
    "prompt-toolkit>=3.0.0",
    "diff-match-patch>=20241021",
    "tqdm>=4.67.1",
    "psutil>=5.9.0",
    "gitpython>=3.1.0",
    "pyyaml>=6.0.0",
]

[tool.setuptools]
packages = ["codebase_rag"]

[project.optional-dependencies]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=4.1.0",
]
dev = [
    "ruff>=0.5.5",
    "mypy>=1.11.0",
    "pre-commit>=4.2.0",
    "types-PyYAML>=6.0.0",
    "types-tqdm>=4.66.0",
    "types-psutil>=5.9.0",
]

treesitter-full = [
    "tree-sitter-python>=0.23.6",
    "tree-sitter-javascript>=0.23.1",
    "tree-sitter-typescript>=0.23.2",
    "tree-sitter-rust>=0.24.0",
    "tree-sitter-go>=0.23.4",
    "tree-sitter-scala>=0.24.0",
    "tree-sitter-java>=0.23.5",
    "tree-sitter-cpp>=0.23.0",
    "tree-sitter-c==0.21.3",
    "tqdm>=4.66.0",
]

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "I",    # isort
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # flake8-eradicate
    "PD",   # pandas-vet
    "PL",   # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy-specific rules
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",    # line-too-long (handled by formatter)
    "PLR0913", # too-many-arguments
    "TRY003",  # Avoid specifying long messages outside the exception class
    "EM102",   # Exception must not use an f-string literal
    "G004",    # Logging format string should not use f-string
    "SIM108",  # Use ternary operator (can reduce readability)
    "PLR2004", # Magic value used in comparison
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "C901",    # Function is too complex
    "ERA001",  # Commented out code (we have TODOs)
    "TD002",   # Missing TODO author
    "TD003",   # Missing TODO link
    "FIX002",  # Line contains TODO
    "ARG002",  # Unused method argument
    "RET504",  # Unnecessary assignment before return
    "SIM117",  # Use single with statement
    "PIE790",  # Unnecessary pass statement
    "PLW0603", # Using the global statement
    "B904",    # Use raise from
    "TRY002",  # Create your own exception
    "RUF012",  # Mutable class attributes should be annotated
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001", "ARG002", "PLR2004", "SIM300"]  # Allow unused arguments and magic values in tests

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true
namespace_packages = true
show_error_codes = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "tree_sitter",
    "tree_sitter_*",
    "pymgclient",
    "watchdog.*",
    "semgrep",
    "gherkin.*",
    "gitpython.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false

[tool.coverage.run]
source = ["codebase_rag"]
omit = ["*/tests/*", "*/test_*", "*/__init__.py"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\(Protocol\\):",
    "@abstractmethod",
]
show_missing = true
precision = 2
fail_under = 80

[tool.pytest.ini_options]
testpaths = ["codebase_rag/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.bandit]
exclude_dirs = ["tests", "codebase_rag/tests"]
skips = ["B101", "B601"]  # Skip assert_used and paramiko tests

[dependency-groups]
dev = [
    "pyinstaller>=6.14.1",
    "pytest>=8.4.1",
    "types-toml>=0.10.8.20240310",
]
